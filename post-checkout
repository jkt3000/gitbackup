#!/usr/bin/env ruby

# gitbackup
# A git post-checkout script that backups and restores your rails database when you switch branches.
# 
# When you checkout a branch, the script will backup your rails dev db to the backup path with the timestamp and branch name.
# Depending on if any changes were detected in the db/migrate/* files, it will restore back your db for the
# given branch if those migrate files were modified or deleted.
# If additions were made, it will migrate your db.

require 'fileutils'
require 'yaml'

BASE_PATH        = File.dirname(__FILE__)
DFLT_BACKUP_PATH = File.join(File.expand_path(BASE_PATH), "../../../backups/") # defaults to <your projects path>/backups/
BACKUP_ROOT      = ENV['GITBACKUP_PATH'] || DFLT_BACKUP_PATH

@prev_sha, @curr_sha, @branch_checkout, _ = *ARGV

# validate backup path exists
def validate_backup_path
  FileUtils.mkdir_p(backup_path) unless backup_path_exists?
  if backup_path_exists?
    puts "Backup path: #{backup_path}."
  else
    puts "Directory #{backup_path} does not exist. Please make sure this directory exists."
    exit
  end
end

# current branch name from sha
def current_branch_from_sha
  @current_branch_from_sha ||= begin
    branches = `git branch --contains #{@curr_sha}`.split("\n")
    curr = branches.find {|branch| branch.match(/^\*/) }
    curr.gsub!(/^\W*/, "")
  end
end

def mark_current_branch
  File.open(marker_file, 'w') {|f| f.write(current_branch_from_sha) }
  current_branch_from_sha
end

def get_previous_branch
  File.exists?(marker_file) ? File.open(marker_file).read : nil
end

def backup_db(name)
  return if name == 'no branch'
  puts "Backing up db..."
  backup_file = File.join(backup_path, Time.now.strftime("%Y-%m-%d-%H:%M:%S_#{name}.mysql"))
  results     = `mysqldump #{database['database']} -u #{database['username']} --add-drop-table > #{backup_file}`  
  puts "Backed up db ==> #{File.basename(backup_file)}"
end

# restore database
def restore_db(name)
  return if name == 'no branch'
  files = backups_for(name)
  if files.empty?
    puts "No db backups found for #{name}. Creating Backup now..."
    backup_db(name)    
  else
    file = files.last
    puts "restoring db..."    
    `mysql -u #{database['username']} #{database['database']} < #{file}` # restore db : mysql -h hostname -u user --password=password databasename < filename
    puts "Restored db from #{File.basename(file)}"
  end
end

def migration_files
  @migration_files ||= begin
    diff = `git diff --name-status #{@prev_sha} #{@curr_sha} | grep db/migrate`
    files = diff.to_s.split("\n").map {|f| f.split(/\s+/) }  # => [ ['D', 'db/migrate/....'], ['A', 'db/migrate/....'] ]
    files
  end
end

# migration required if any db/migrate files are A or M
def migration_required?
  migration_files.any? {|type, file| type != 'D' }
end

def migrate_db
  puts "migrating database..."
  Dir.chdir(File.join(BASE_PATH, "../../"))  # rails project path
  puts `rake db:migrate`
ensure
  Dir.chdir(BASE_PATH) # back to hooks path
end

# prune_backups
# keep most oldest, plus most recent 5 backups for a given branch, delete the rest
def prune_backups(name)
  if files = Dir.glob(File.join(backup_path, "*#{name}.mysql"))
    files.sort[1..-6].each do |file| 
      FileUtils.rm file
      puts "Removed old backup #{File.basename(file)} (keeping first plus last 5)"
    end
  end
end

# rails config/database.yml
def database
  @database ||= begin
    dbconfig = File.join(File.dirname(__FILE__), "../../config/database.yml")
    YAML.load(File.read(dbconfig))['development']
  end
end

def backup_path
  File.join(BACKUP_ROOT, database['database'])
end

def marker_file
  File.join(backup_path, 'current_branch')
end

def backup_path_exists?
  File.exists?(backup_path) && File.directory?(backup_path)
end

def backups_for(name)
  return [] if name.nil? || name.empty?
  Dir.glob(File.join(backup_path, "*#{name}.mysql")).sort
end

begin  
  validate_backup_path

  prev_branch = get_previous_branch
  curr_branch = mark_current_branch 
  
  if prev_branch == 'no branch' || curr_branch == 'no branch'
    puts "invalid branch name..exiting"
    exit
  end

  # check if change branches
  if curr_branch == prev_branch
    puts "Branch hasn't changed, no db backup/restore required. Migrate manually if needed"
    exit
  end
  
  # backup if no backup exists yet
  [prev_branch, curr_branch].each do |br| 
    backup_db(br) if backups_for(br).empty? 
  end

  puts "Switching Branches: #{prev_branch} (#{@prev_sha}) => #{curr_branch} (#{@curr_sha})"
  if migration_files.size > 0
    puts "Detected the following migration files changed:"
    migration_files.each {|f| puts f.join(": ") }
        
    backup_db(prev_branch) if prev_branch
    restore_db(curr_branch)
    migrate_db if migration_required?
  end
  
  prune_backups(prev_branch)
  prune_backups(curr_branch)
end
